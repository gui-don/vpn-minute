stages:
  - static_analysis
  - build
  - test
  - deploy

image: registry.gitlab.com/gui-don/moustache-ci-docker:7.4

cache:
  paths:
    - vendor/

before_script:
  - php --version
  - composer install -o --no-interaction

###
# Dependency scanning
###

include:
  - template: Dependency-Scanning.gitlab-ci.yml

###
# Static analysis
###

code_style:
  stage: static_analysis
  script:
    - vendor/bin/php-cs-fixer fix --dry-run --allow-risky yes --config config/test/phpcsfixer.dist src test main.php

sast:
  stage: static_analysis
  artifacts:
    reports:
      sast: gl-sast-report.json
  script:
    - chmod +x ./vendor/pheromone/phpcs-security-audit/symlink.sh
    - ./vendor/pheromone/phpcs-security-audit/symlink.sh
    - ./vendor/bin/phpcs -p --error-severity=1 --report=json --report-file=gl-sast-report.json --warning-severity=6 --standard=./vendor/pheromone/phpcs-security-audit/example_base_ruleset.xml --extensions=php,inc,lib,module,info src
    - ./vendor/bin/phpcs -p --error-severity=1 --warning-severity=1 --standard=./vendor/pheromone/phpcs-security-audit/example_base_ruleset.xml --extensions=lib,module,inf vendor

stan:
  stage: static_analysis
  script:
    - vendor/bin/phpstan analyse src main.php --level 5

###
# Unit tests
###

.unit_template:
  stage: test
  script:
    - php vendor/bin/phpspec -c config/test/phpspec.yml --no-interaction -v run test/Spec/Core
    - php vendor/bin/phpspec -c config/test/phpspec.yml --no-interaction -v run test/Spec/InfrastructureProvisioner

unit:coverage:
  stage: test
  image: registry.gitlab.com/gui-don/moustache-ci-docker:coverage
  script: vendor/bin/phpspec --config config/test/phpspec_coverage.yml --no-interaction -v run
  coverage: '/^\s*Lines:\s*\d+.\d+\%/'
  artifacts:
    paths:
      - coverage.xml
  variables:
    XDEBUG_MODE: coverage

unit:7.3:
  extends: .unit_template
  image: registry.gitlab.com/gui-don/moustache-ci-docker:7.3

unit:7.4:
  extends: .unit_template
  image: registry.gitlab.com/gui-don/moustache-ci-docker:7.4

unit:8.0:
  extends: .unit_template
  image: registry.gitlab.com/gui-don/moustache-ci-docker:8.0

###
# Functional tests
###

.func_template:
  stage: test
  script:
    - vendor/bin/behat --config config/test/behat.yml --suite=core_suite

func:7.3:
  extends: .func_template
  image: registry.gitlab.com/gui-don/moustache-ci-docker:7.3

func:7.4:
  extends: .func_template
  image: registry.gitlab.com/gui-don/moustache-ci-docker:7.4

func:8.0:
  extends: .func_template
  image: registry.gitlab.com/gui-don/moustache-ci-docker:8.0

###
# Deployement
###

# Not implemented yet

###
# Legacy
###

variables:
  AUR_REPOSITORY_PATH: "/tmp/aur-$CI_PROJECT_TITLE"

.git_setup_archlinux:
  image: archlinux:latest
  before_script:
    - pacman -Suy --noconfirm git openssh
    - mkdir ~/.ssh/
    - ssh-keyscan -4 aur.archlinux.org
    - echo "$AUR_PUBLIC_KEY" > ~/.ssh/id_ed25519.pub
    - echo "$AUR_PRIVATE_KEY_BASE_64" | base64 -d > ~/.ssh/id_ed25519
    - echo "$AUR_KNOWN_HOSTS_BASE_64" | base64 -d > ~/.ssh/known_hosts
    - cat ~/.ssh/known_hosts
    - chmod 400 ~/.ssh/id_ed25519
    - git clone ssh://aur@aur.archlinux.org/$CI_PROJECT_TITLE.git "$AUR_REPOSITORY_PATH"
  artifacts:
    paths:
      - PKGBUILD
      - .SRCINFO
  only:
    refs:
      - /^v?[0-9]+\.[0-9]+\.[0-9]+$/
    variables:
      - $CI_COMMIT_REF_PROTECTED == "true"
  except:
    - schedules
    - api
    - external
    - chat

build_package_archlinux:
  stage: build
  extends: .git_setup_archlinux
  script:
    - pacman -Sy --noconfirm sudo base-devel curl
    - export CURRENT_VERSION=$(cat "$AUR_REPOSITORY_PATH/PKGBUILD" | grep 'pkgver=' | cut -f 2 -d "=" | tr -d '"')
    - export PKGREL=$(cat "$AUR_REPOSITORY_PATH/PKGBUILD" | grep 'pkgrel=' | cut -f 2 -d "=" | tr -d '"')
    - export CI_COMMIT_TAG=${CI_COMMIT_TAG:-$CURRENT_VERSION}
    - export ARCHIVE_NAME="$CI_PROJECT_TITLE-$CI_COMMIT_TAG.tar.gz"
    - curl -o "/tmp/$ARCHIVE_NAME" -fSL "https://gitlab.com/gui-don/$CI_PROJECT_TITLE/-/archive/$CI_COMMIT_TAG/$CI_PROJECT_TITLE-$CI_COMMIT_TAG.tar.gz"
    - export B2SUM=$(b2sum "/tmp/$CI_PROJECT_TITLE-$CI_COMMIT_TAG.tar.gz" | cut -f 1 -d " ")
    - rm "/tmp/$ARCHIVE_NAME"
    - if [ "$CI_COMMIT_TAG" = "$CURRENT_VERSION" ]; then let "PKGREL++"; else PKGREL=1; fi
    - install/generate_pkgbuild.sh "$CI_COMMIT_TAG" "$PKGREL" "$B2SUM"
    - useradd -m -G wheel makepkg
    - sudo -u makepkg sh -c 'makepkg --printsrcinfo > "/tmp/.SRCINFO"'
    - cp /tmp/.SRCINFO .SRCINFO

build_package_archlinux_for_test:
  image: archlinux:latest
  stage: build
  before_script:
    - pacman -Sy --noconfirm sudo base-devel
    - useradd -m -G wheel makepkg
    - export CURRENT_VERSION=test
    - export PKGREL=1
    - export B2SUM=test
    - export ARCHIVE_NAME="$CI_PROJECT_TITLE-$CURRENT_VERSION"
  script:
    - install/generate_pkgbuild.sh "$CURRENT_VERSION" "$PKGREL" "$B2SUM"
    - mv ../$CI_PROJECT_TITLE/ ../$ARCHIVE_NAME/
    - tar -czf "$ARCHIVE_NAME.tar.gz" ../$ARCHIVE_NAME
    - mv ../$ARCHIVE_NAME/ ../$CI_PROJECT_TITLE/
    - sudo -u makepkg sh -c 'makepkg --printsrcinfo > "/tmp/.SRCINFO"'
    - cp /tmp/.SRCINFO .SRCINFO
  artifacts:
    paths:
      - PKGBUILD
      - .SRCINFO
      - "*.tar.gz"
  except:
    refs:
      - /^v?[0-9]+\.[0-9]+\.[0-9]+$/

test_package_archlinux:
  image: archlinux:latest
  stage: test
  before_script:
    - pacman -Sy --noconfirm base-devel
    - useradd -m -G wheel makepkg
    - sed -i 's/^#\s*\(%wheel\s*ALL=(ALL)\s*NOPASSWD:\s*ALL\)/\1/' /etc/sudoers
  script:
    - chown -R makepkg:makepkg *
    - if [ -z "$CI_COMMIT_TAG" ]; then sudo -E -u makepkg makepkg -si --skipchecksums --noconfirm; else sudo -E -u makepkg makepkg -si --noconfirm; fi
    - vpnm -h
  artifacts:
    paths:
      - PKGBUILD
      - .SRCINFO

deploy_package_archlinux:
  stage: deploy
  extends: .git_setup_archlinux
  script:
    - cp CHANGELOG.md "$AUR_REPOSITORY_PATH/CHANGELOG.md"
    - cp PKGBUILD "$AUR_REPOSITORY_PATH/PKGBUILD"
    - cp .SRCINFO "$AUR_REPOSITORY_PATH/.SRCINFO"
    - cat "$AUR_REPOSITORY_PATH/.SRCINFO"
    - cd "$AUR_REPOSITORY_PATH"
    - git config --global user.email "$AUR_MAINTAINER_EMAIL"
    - git config --global user.name "vpnm CI CD"
    - ls
    - git add .
    - git commit -m "new package version ${CI_COMMIT_TAG}-$PKGREL"
    - git push origin master
